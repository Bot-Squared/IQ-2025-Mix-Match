{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor FL = motor(PORT1, false);\nmotor FR = motor(PORT12, true);\nmotor SF = motor(PORT6, false);\nmotor SB = motor(PORT7, true);\ntouchled FLLight = touchled(PORT4);\ntouchled FRLight = touchled(PORT5);\ntouchled BLLight = touchled(PORT3);\ntouchled BRLight = touchled(PORT2);\nmotor Vertical = motor(PORT8, true);\nmotor Claw = motor(PORT9, false);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool eButtonsControlMotorsStopped = true;\nbool fButtonsControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonEUp/ButtonEDown status to control Claw\n      if (Controller.ButtonEUp.pressing()) {\n        Claw.spin(forward);\n        eButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonEDown.pressing()) {\n        Claw.spin(reverse);\n        eButtonsControlMotorsStopped = false;\n      } else if (!eButtonsControlMotorsStopped) {\n        Claw.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        eButtonsControlMotorsStopped = true;\n      }\n      // check the ButtonFUp/ButtonFDown status to control Vertical\n      if (Controller.ButtonFUp.pressing()) {\n        Vertical.spin(forward);\n        fButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonFDown.pressing()) {\n        Vertical.spin(reverse);\n        fButtonsControlMotorsStopped = false;\n      } else if (!fButtonsControlMotorsStopped) {\n        Vertical.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        fButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// --- AUTONOMOUS RECORDING & REPLAY CODE START ---\n\n// --- Configuration and Variables ---\nconst int MAX_FRAMES = 1550;\nconst double MAX_RECORD_SECONDS = 62.0;\nconst int RECORD_INTERVAL_MS = 40;\n\n// --- MODIFIED RobotState Struct ---\n// Now stores sensor feedback in addition to controller inputs\nstruct RobotState {\n  // Controller inputs (kept for reference or simple accessory control)\n  bool btnEUp;\n  bool btnEDown;\n  bool btnFUp;\n  bool btnFDown;\n\n  // Sensor and Motor Feedback\n  double heading;      // Robot's orientation from Inertial Sensor\n  double fl_pos;       // Front-Left motor position in degrees\n  double fr_pos;       // Front-Right motor position in degrees\n  double sf_pos;       // Strafe-Front motor position in degrees\n  double sb_pos;       // Strafe-Back motor position in degrees\n};\n\n\n// Array to store the sequence of recorded states\nRobotState recording[MAX_FRAMES];\n\n// State management variables\nbool isRecording = false;\nbool isReplaying = false;\nbool recordingAvailable = false;\nint recordingIndex = 0;\nint maxRecordingIndex = 0;\nvex::timer recordTimer; // Timer to manage recording duration\n\n// --- REWRITTEN Replay Task ---\n// This function runs as a separate task to replay the recorded actions using PID control.\nint replayAuton() {\n  // Disable driver control during replay\n  RemoteControlCodeEnabled = false;\n  isReplaying = true;\n  BRLight.setColor(blue);\n\n  // --- PID Controller Constants (These are the values you will TUNE) ---\n  double kP_drive = 0.3; // Proportional constant for drive/strafe motors.\n                         // Controls how aggressively the robot tries to match the recorded distance.\n  double kP_turn = 1.2;  // Proportional constant for turning.\n                         // Controls how aggressively the robot corrects its heading.\n\n  // Reset the \"real\" robot's state to match the state at the beginning of the recording.\n  BrainInertial.setHeading(recording[0].heading, degrees);\n  FL.setPosition(0, degrees);\n  FR.setPosition(0, degrees);\n  SF.setPosition(0, degrees);\n  SB.setPosition(0, degrees);\n  wait(150, msec); // Give sensors a moment to settle.\n\n  // Loop through each recorded frame\n  for (int i = 0; i < maxRecordingIndex; i++) {\n    // --- Get TARGETS for this frame from the recording ---\n    double target_heading = recording[i].heading;\n    double target_fl_pos = recording[i].fl_pos;\n    double target_fr_pos = recording[i].fr_pos;\n    double target_sf_pos = recording[i].sf_pos;\n    \n    // --- Calculate ERROR (Difference between target and actual) ---\n    // Heading Error\n    double current_heading = BrainInertial.heading(degrees);\n    double heading_error = target_heading - current_heading;\n    // Handle the angle wrap-around (e.g., going from 359 to 1 degree is a 2-degree turn, not 358)\n    while (heading_error > 180)  heading_error -= 360;\n    while (heading_error < -180) heading_error += 360;\n\n    // Position Error (how far each motor is from its recorded target rotation)\n    double fl_error = target_fl_pos - FL.position(degrees);\n    double fr_error = target_fr_pos - FR.position(degrees);\n    double sf_error = target_sf_pos - SF.position(degrees);\n    \n    // --- Calculate Motor Power from Error using P-Controller ---\n    // Power = Error * kP_constant\n    double turn_power = heading_error * kP_turn;\n    // Average the error of the two forward motors for a stable drive power\n    double drive_power = ((fl_error + fr_error) / 2.0) * kP_drive; \n    double strafe_power = sf_error * kP_drive;\n    \n    // --- Apply Final Power to Motors (H-Drive Logic) ---\n    FL.setVelocity(drive_power - turn_power, percent);\n    FR.setVelocity(drive_power + turn_power, percent);\n    SF.setVelocity(strafe_power, percent);\n    SB.setVelocity(strafe_power, percent); // Strafe motors move together\n\n    FL.spin(forward); FR.spin(forward);\n    SF.spin(forward); SB.spin(forward);\n    \n    // --- Replay Claw and Lift Control (This logic remains open-loop) ---\n    if (recording[i].btnEUp) {\n      Claw.spin(forward);\n    } else if (recording[i].btnEDown) {\n      Claw.spin(reverse);\n    } else {\n      Claw.stop();\n    }\n\n    if (recording[i].btnFUp) {\n      Vertical.spin(forward);\n    } else if (recording[i].btnFDown) {\n      Vertical.spin(reverse);\n    } else {\n      Vertical.stop();\n    }\n    \n    // Wait for the interval before processing the next frame\n    wait(RECORD_INTERVAL_MS, msec);\n  }\n\n  // --- Cleanup after replay is finished ---\n  FL.stop(hold); FR.stop(hold); SF.stop(hold); SB.stop(hold);\n  Claw.stop(); Vertical.stop();\n  \n  // Re-enable driver control and reset state\n  isReplaying = false;\n  RemoteControlCodeEnabled = true;\n  BRLight.setColor(green); // Set light to show replay is available again\n\n  return 0;\n}\n// --- AUTONOMOUS RECORDING & REPLAY CODE END ---\n\n\n// User defined function\nvoid myblockfunction_Initialise();\n\n\n// User defined function\nvoid myblockfunction_Initialise() {\n  BrainInertial.setHeading(0.0, degrees);\n\n  // **NEW: Reset motor encoders to 0 at the start**\n  // This is CRITICAL for the recording to be accurate.\n  FL.setPosition(0.0, degrees);\n  FR.setPosition(0.0, degrees);\n  SF.setPosition(0.0, degrees);\n  SB.setPosition(0.0, degrees);\n\n  FLLight.setColor(green);\n  FRLight.setColor(green);\n  BLLight.setColor(green); \n  BRLight.setColor(red);   \n  FLLight.setBrightness(100);\n  FRLight.setBrightness(100);\n  BLLight.setBrightness(100);\n  BRLight.setBrightness(100);\n\n  // Motor setup\n  Vertical.setVelocity(100.0, percent);\n  Claw.setVelocity(100.0, percent);\n  Vertical.setMaxTorque(100.0, percent);\n  Vertical.setStopping(hold);\n  Claw.setStopping(hold);\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  myblockfunction_Initialise();\n  \n  while (true) {\n    // --- STATE MANAGEMENT LOGIC (No changes here) ---\n    if (BLLight.pressing() && !isRecording && !isReplaying) {\n      isRecording = true;\n      recordingAvailable = false;\n      recordingIndex = 0;\n      BLLight.setColor(red);\n      BRLight.setColor(red);\n      recordTimer.clear();\n      wait(300, msec);\n    }\n    if (BRLight.pressing() && recordingAvailable && !isRecording && !isReplaying) {\n      task replayTaskInstance(replayAuton);\n      wait(300, msec);\n    }\n\n    // --- ACTIVE RECORDING LOGIC ---\n    if (isRecording) {\n      bool stop_pressed = BLLight.pressing();\n      bool timeout = recordTimer.time(sec) >= MAX_RECORD_SECONDS;\n      if (stop_pressed || timeout) {\n        isRecording = false;\n        maxRecordingIndex = recordingIndex;\n        BLLight.setColor(green);\n        if (maxRecordingIndex > 0) {\n          recordingAvailable = true;\n          BRLight.setColor(green);\n        } else {\n          recordingAvailable = false;\n          BRLight.setColor(red);\n        }\n        if (stop_pressed) wait(300, msec);\n      } \n      // --- MODIFIED Recording Frame ---\n      else if (recordTimer.time(msec) >= (recordingIndex * RECORD_INTERVAL_MS) && recordingIndex < MAX_FRAMES) {\n        // Record accessory buttons\n        recording[recordingIndex].btnEUp = Controller.ButtonEUp.pressing();\n        recording[recordingIndex].btnEDown = Controller.ButtonEDown.pressing();\n        recording[recordingIndex].btnFUp = Controller.ButtonFUp.pressing();\n        recording[recordingIndex].btnFDown = Controller.ButtonFDown.pressing();\n        \n        // **NEW: Record sensor and motor feedback**\n        recording[recordingIndex].heading = BrainInertial.heading(degrees);\n        recording[recordingIndex].fl_pos = FL.position(degrees);\n        recording[recordingIndex].fr_pos = FR.position(degrees);\n        recording[recordingIndex].sf_pos = SF.position(degrees);\n        recording[recordingIndex].sb_pos = SB.position(degrees);\n\n        recordingIndex++;\n      }\n    }\n    \n    // --- DRIVER CONTROL LOGIC (Drivetrain) ---\n    // This part runs continuously as long as a replay is not active.\n    if (!isReplaying) {\n        // This is a simplified arcade/strafe control for an H-drive.\n        int fwdValue = Controller.AxisD.position();\n        int turnValue = Controller.AxisC.position();\n        int strafeValue = Controller.AxisB.position();\n\n        if (fwdValue == 0 && turnValue == 0 && strafeValue == 0) {\n            FL.stop(hold);\n            FR.stop(hold);\n            SF.stop(hold);\n            SB.stop(hold);\n        } else {\n            FL.setVelocity(fwdValue - turnValue, percent);\n            FR.setVelocity(fwdValue + turnValue, percent);\n            SF.setVelocity(strafeValue, percent);\n            SB.setVelocity(strafeValue, percent);\n\n            FL.spin(forward);\n            FR.spin(forward);\n            SF.spin(forward);\n            SB.spin(forward);\n        }\n    }\n    \n    wait(20, msec); // Keep the main loop responsive\n  }\n  return 0;\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  whenStarted1();\n}","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"Claw","eDir":"false","f":"Vertical","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[1],"name":"FL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"FR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"SF","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"SB","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"FLLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[5],"name":"FRLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[3],"name":"BLLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[2],"name":"BRLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[8],"name":"Vertical","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[9],"name":"Claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":1,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.62.0","minVersion":"4.60.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null},"target":"Physical"}