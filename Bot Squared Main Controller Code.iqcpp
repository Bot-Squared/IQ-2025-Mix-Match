{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor FL = motor(PORT1, false);\nmotor FR = motor(PORT12, true);\nmotor SF = motor(PORT6, false);\nmotor SB = motor(PORT7, true);\ntouchled FLLight = touchled(PORT4);\ntouchled FRLight = touchled(PORT5);\ntouchled BLLight = touchled(PORT3);\ntouchled BRLight = touchled(PORT2);\nmotor Vertical = motor(PORT8, true);\nmotor Claw = motor(PORT9, false);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool eButtonsControlMotorsStopped = true;\nbool fButtonsControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonEUp/ButtonEDown status to control Claw\n      if (Controller.ButtonEUp.pressing()) {\n        Claw.spin(forward);\n        eButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonEDown.pressing()) {\n        Claw.spin(reverse);\n        eButtonsControlMotorsStopped = false;\n      } else if (!eButtonsControlMotorsStopped) {\n        Claw.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        eButtonsControlMotorsStopped = true;\n      }\n      // check the ButtonFUp/ButtonFDown status to control Vertical\n      if (Controller.ButtonFUp.pressing()) {\n        Vertical.spin(forward);\n        fButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonFDown.pressing()) {\n        Vertical.spin(reverse);\n        fButtonsControlMotorsStopped = false;\n      } else if (!fButtonsControlMotorsStopped) {\n        Vertical.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        fButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the IQ Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// User defined function\nvoid myblockfunction_Initialise();\n\n\n// User defined function\nvoid myblockfunction_Initialise() {\n  BrainInertial.setHeading(0.0, degrees);\n  FLLight.setColor(green);\n  FRLight.setColor(green);\n  BLLight.setColor(red);\n  BRLight.setColor(red);\n  FLLight.setBrightness(100);\n  FRLight.setBrightness(100);\n  BLLight.setBrightness(100);\n  BRLight.setBrightness(100);\n  FL.setVelocity(0.0, percent);\n  FR.setVelocity(0.0, percent);\n  SF.setVelocity(0.0, percent);\n  SB.setVelocity(0.0, percent);\n  FL.setMaxTorque(200.0, percent);\n  FR.setMaxTorque(200.0, percent);\n  SF.setMaxTorque(200.0, percent);\n  SB.setMaxTorque(200.0, percent);\n  FL.setPosition(0.0, degrees);\n  FR.setPosition(0.0, degrees);\n  SF.setPosition(0.0, degrees);\n  SB.setPosition(0.0, degrees);\n  Vertical.setVelocity(100.0, percent); // Set velocity for Vertical motor\n  Claw.setVelocity(100.0, percent); // Set velocity for Claw motor\n  Vertical.setMaxTorque(100.0, percent);\n  Vertical.setStopping(hold);\n  Claw.setStopping(hold);\n  FL.spin(forward);\n  FR.spin(forward);\n  SF.spin(forward);\n  SB.spin(forward);\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  myblockfunction_Initialise();\n  while (true) {\n    if (Controller.AxisB.position() == 0.0 && (Controller.AxisD.position() == 0.0 && Controller.AxisC.position() == 0.0)) {\n      FL.setStopping(hold);\n      FR.setStopping(hold);\n      SF.setStopping(hold);\n      SB.setStopping(hold);\n      FL.stop();\n      FR.stop();\n      SF.stop();\n      SB.stop();\n    }\n    else {\n      FL.setStopping(coast);\n      FR.setStopping(coast);\n      SF.setStopping(coast);\n      SB.setStopping(coast);\n      FL.spin(forward);\n      FR.spin(forward);\n      SF.spin(forward);\n      SB.spin(forward);\n      if (Controller.AxisB.position() == 0.0) {\n        FL.setVelocity((Controller.AxisD.position() * 1.0), percent);\n        FR.setVelocity((Controller.AxisD.position() * 1.0), percent);\n        SF.setVelocity((Controller.AxisC.position() * 1.0), percent);\n        SB.setVelocity((Controller.AxisC.position() * 1.0), percent);\n      }\n      else {\n        FL.setVelocity((Controller.AxisB.position() * 1.0), percent);\n        FR.setVelocity(((0.0 - Controller.AxisB.position()) * 1.0), percent);\n        SF.setVelocity((Controller.AxisB.position() * 1.0), percent);\n        SB.setVelocity(((0.0 - Controller.AxisB.position()) * 1.0), percent);\n      }\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  whenStarted1();\n}","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"Claw","eDir":"false","f":"Vertical","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[1],"name":"FL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"FR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"SF","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"SB","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"FLLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[5],"name":"FRLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[3],"name":"BLLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[2],"name":"BRLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[8],"name":"Vertical","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[9],"name":"Claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.10","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}