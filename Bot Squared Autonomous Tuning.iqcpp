{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncontroller Controller = controller();\nmotor FL = motor(PORT1, false);\nmotor FR = motor(PORT12, true);\nmotor SF = motor(PORT6, false);\nmotor SB = motor(PORT7, true);\ntouchled FLLight = touchled(PORT4);\ntouchled FRLight = touchled(PORT5);\ntouchled BLLight = touchled(PORT3);\ntouchled BRLight = touchled(PORT2);\nmotor Vertical = motor(PORT8, true);\nmotor Claw = motor(PORT9, false);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool eButtonsControlMotorsStopped = true;\nbool fButtonsControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonEUp/ButtonEDown status to control Claw\n      if (Controller.ButtonEUp.pressing()) {\n        Claw.spin(forward);\n        eButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonEDown.pressing()) {\n        Claw.spin(reverse);\n        eButtonsControlMotorsStopped = false;\n      } else if (!eButtonsControlMotorsStopped) {\n        Claw.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        eButtonsControlMotorsStopped = true;\n      }\n      // check the ButtonFUp/ButtonFDown status to control Vertical\n      if (Controller.ButtonFUp.pressing()) {\n        Vertical.spin(forward);\n        fButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonFDown.pressing()) {\n        Vertical.spin(reverse);\n        fButtonsControlMotorsStopped = false;\n      } else if (!fButtonsControlMotorsStopped) {\n        Vertical.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        fButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n#pragma endregion VEXcode Generated Robot Configuration\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Robot configuration\nbrain Brain;\nmotor FL(PORT1, false);\nmotor FR(PORT12, true);\nmotor SF(PORT6, false);\nmotor SB(PORT7, true);\ninertial BrainInertial;\n\n// Simple waitUntil macro\n#define waitUntil(condition) \\\n  do { wait(5, msec); } while (!(condition))\n\n// Function to spin all drive motors\nvoid setDrivePower(double fl, double fr, double sf, double sb) {\n    FL.setVelocity(fl, percent);\n    FR.setVelocity(fr, percent);\n    SF.setVelocity(sf, percent);\n    SB.setVelocity(sb, percent);\n    FL.spin(forward);\n    FR.spin(forward);\n    SF.spin(forward);\n    SB.spin(forward);\n}\n\n// Function to stop all drive motors\nvoid stopDrive() {\n    FL.stop(hold);\n    FR.stop(hold);\n    SF.stop(hold);\n    SB.stop(hold);\n}\n\nint main() {\n    BrainInertial.calibrate();\n    while (BrainInertial.isCalibrating()) wait(50, msec);\n\n    // Reset motor positions\n    FL.setPosition(0, degrees);\n    FR.setPosition(0, degrees);\n    SF.setPosition(0, degrees);\n    SB.setPosition(0, degrees);\n\n    // Auto-tune variables\n    double kP = 0.0;\n    double step = 0.05;\n    double maxPower = 50.0; // percent\n    double targetAngle = 360; // target rotation in degrees for tuning\n    double tolerance = 2; // degrees\n\n    // First tune clockwise\n    Brain.Screen.clearScreen();\n    Brain.Screen.print(\"Tuning CW...\");\n\n    while (kP < 2.0) {\n        FL.setPosition(0, degrees);\n        FR.setPosition(0, degrees);\n        SF.setPosition(0, degrees);\n        SB.setPosition(0, degrees);\n\n        double error = targetAngle - BrainInertial.heading(degrees);\n        int timeout = 0;\n\n        while (fabs(error) > tolerance && timeout < 100) {\n            error = targetAngle - BrainInertial.heading(degrees);\n            double power = kP * error;\n            if (power > maxPower) power = maxPower;\n            if (power < -maxPower) power = -maxPower;\n\n            setDrivePower(power, -power, power, -power);\n            wait(20, msec);\n            timeout++;\n        }\n\n        if (timeout < 100) break; // succeeded\n        kP += step;\n    }\n    double kP_CW = kP;\n\n    // Then tune counter-clockwise\n    kP = 0.0;\n    targetAngle = -360;\n    Brain.Screen.clearScreen();\n    Brain.Screen.print(\"Tuning CCW...\");\n\n    while (kP < 2.0) {\n        FL.setPosition(0, degrees);\n        FR.setPosition(0, degrees);\n        SF.setPosition(0, degrees);\n        SB.setPosition(0, degrees);\n\n        double error = targetAngle - BrainInertial.heading(degrees);\n        int timeout = 0;\n\n        while (fabs(error) > tolerance && timeout < 100) {\n            error = targetAngle - BrainInertial.heading(degrees);\n            double power = kP * error;\n            if (power > maxPower) power = maxPower;\n            if (power < -maxPower) power = -maxPower;\n\n            setDrivePower(power, -power, power, -power);\n            wait(20, msec);\n            timeout++;\n        }\n\n        if (timeout < 100) break;\n        kP += step;\n    }\n    double kP_CCW = kP;\n\n    // Stop the robot\n    stopDrive();\n\n    // Print results\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.print(\"KP CW: %.2f\", kP_CW);\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"KP CCW: %.2f\", kP_CCW);\n\n    while(true) wait(100, msec); // keep screen displayed\n}\n\n\n// in tune.iqcpp\nint main() {\n    // ... skipping code to shorten for brevity so you don't have to read too much\n    double kP = 0.0;\n    double step = 0.05;\n    double targetAngle = 360; \n    \n    // ... skipping code to shorten for brevity so you don't have to read too much\n    while (kP < 2.0) {\n        // ... skipping code to shorten for brevity so you don't have to read too much\n        int timeout = 0;\n        // Try to complete a 360 degree turn\n        while (fabs(error) > tolerance && timeout < 100) {\n            // ... apply power based on current kP ...\n            timeout++;\n        }\n\n        if (timeout < 100) break; // succeeded, we found a good kP\n        kP += step; // if not, increase kP and try again\n    }\n    double kP_CW = kP;\n    \n    // ...skipping code to shorten for brevity so you don't have to read too much\n    Brain.Screen.print(\"KP CW: %.2f\", kP_CW);\n}","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"Claw","eDir":"false","f":"Vertical","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[1],"name":"FL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"FR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"SF","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"SB","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"FLLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[5],"name":"FRLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[3],"name":"BLLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[2],"name":"BRLight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[8],"name":"Vertical","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[9],"name":"Claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":1,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.62.0","minVersion":"4.60.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null},"target":"Physical"}